<?php

return [
    'accept_collection_transfer.args.collectionId' => 'The ID of the collection for which ownership is being accepted.',
    'accept_collection_transfer.description' => 'Accept a collection ownership transfer request. [Learn more](https://docs.enjin.io/docs/transfer-accept-collection).',
    'acknowledge_events.args.uuids' => 'The event UUIDs to acknowledge.',
    'acknowledge_events.description' => 'Use this mutation to acknowledge cached events and remove them from the cache.',
    'add_to_tracked.args.chain_ids' => 'The on-chain model IDs to track, e.g. the collection IDs.',
    'add_to_tracked.args.hot_sync' => 'Hot syncing will import the chain data right away.  Turn this off if you intend to do a full sync instead.',
    'add_to_tracked.args.model_type' => 'The model type, e.g. COLLECTION',
    'add_to_tracked.description' => 'Add on-chain data to track.  Use this to limit which collections and tokens are synced and tracked on the platform.  If existing data exists on chain it will be imported.',
    'approve_collection.args.collectionId' => 'The collection that will be approved.',
    'approve_collection.args.operator' => 'The account that will be approved to operate the collection.',
    'approve_collection.description' => 'Approve another account to transfer any tokens from a collection account. You can also specify a block number where this approval will expire.',
    'approve_token.args.amount' => 'The amount of tokens it will be approved to operate.',
    'approve_token.args.collectionId' => 'The collection that the token that will be approved belongs to.',
    'approve_token.args.currentAmount' => 'The current amount of tokens the operator has.',
    'approve_token.args.expiration' => 'The block number where the approval will expire. Leave it as null for no expiration.',
    'approve_token.args.operator' => 'The account that will be approved to operate the token.',
    'approve_token.args.tokenId' => 'The token ID that will be approved.',
    'approve_token.description' => 'Approve another account to make transfers from a token account. You can also specify a block number where this approval will expire and the amount of tokens this account will be able to transfer.',
    'args.signingAccount' => 'The wallet used to sign and broadcast the transaction. By default, this is the wallet daemon. To sign from a Managed Wallet, see [Using Managed Wallets](https://docs.enjin.io/docs/using-managed-wallets).',
    'args.skipValidation' => 'Bypasses platform validation checks that prevent likely-to-fail transactions. Use cautiously. Defaults to false.',
    'batch_mint.args.collectionId' => 'The collection ID',
    'batch_mint.args.recipients' => 'A list of recipients, each with configuration for creating new tokens or specifying existing tokens and amounts to mint.',
    'batch_mint.description' => 'Batch multiple token creation or mints into a single transaction, combining the creation of new tokens and minting additional supply for existing tokens as needed.',
    'batch_set_attribute.args.amount' => 'The amount to transfer. Denoted in u128 (divided by 10^18).',
    'batch_set_attribute.args.attributes' => 'List of attributes to set.',
    'batch_set_attribute.args.collectionId' => 'The collection ID.',
    'batch_set_attribute.args.continueOnFailure' => 'Whether to make the possible extrinsics if one of them fails. Defaults to false.',
    'batch_set_attribute.args.keepAlive' => 'If true, the transaction will fail if the recipient account\'s balance would drop below the existential deposit. Defaults to false. [Learn more about the existential deposit](https://support.enjin.io/hc/en-gb/articles/16297132519569-What-is-the-Existential-Deposit).',
    'batch_set_attribute.args.key' => "The attribute key. (e.g. 'name' or 'external_url'). [Learn more](https://docs.enjin.io/docs/metadata-standard).",
    'batch_set_attribute.args.recipient' => 'The recipient account that will receive the transfer.',
    'batch_set_attribute.args.value' => "The attribute value. (e.g. 'Epic Sword' or 'https://your-website.com').",
    'batch_set_attribute.description' => 'Set multiple attributes on a collection or a specific token in a single transaction. If the tokenId argument is provided, attributes are set on the token; otherwise, they are set on the collection. [Learn more](https://docs.enjin.io/docs/adding-metadata).',
    'batch_transfer.args.amount' => 'The amount of tokens to transfer.',
    'batch_transfer.args.collectionId' => 'The collection ID that you be transferring the tokens from.',
    'batch_transfer.args.continueOnFailure' => 'Whether to make the possible extrinsics if one of them fails. Defaults to false.',
    'batch_transfer.args.signingAccount' => 'The wallet used to sign and broadcast the transaction. By default, this is the wallet daemon. To sign from a Managed Wallet, see [Using Managed Wallets](https://docs.enjin.io/docs/using-managed-wallets).',
    'batch_transfer.description' => 'Use this method to transfer multiple tokens in one transaction. You can include up to 250 different transfers per batch. Set the continueOnFailure to true to allow all valid transfers to complete while skipping transfers which would fail so they can be fixed and attempted again in another transaction.',
    'batch_transfer_balance.description' => 'Transfers the native currency of the configured blockchain (e.g., ENJ on the Enjin Matrixchain or CENJ on the Canary Matrixchain testnet) in a single batch, enabling multiple transfers in one operation.',
    'burn.args.params' => 'Defines the configuration for the token burn operation, including the token to be burned, the amount to reduce from circulation, and additional settings for permanent removal from the blockchain. [Learn more](https://docs.enjin.io/docs/burning-destroying-tokens).',
    'burn.args.params.amount' => 'The amount of tokens to burn.',
    'burn.description' => 'Reduces the circulating supply of a token by burning token balances. It can also be used to completely remove a token from the blockchain by burning the entire token circulating supply, removing its attributes, and enabling the `removeTokenStorage` flag. [Learn more](https://docs.enjin.io/docs/burning-destroying-tokens).',
    'common.args.collectionId' => 'The collection ID to use in this operation.',
    'common.args.continueOnFailure' => 'Set to true to process valid operations in the batch while skipping those that would cause errors, ensuring the batch continues without failing entirely. Defaults to false.',
    'common.args.recipients' => 'The list of recipients that will receive tokens.',
    'create_collection.args.attributes' => 'Set initial [metadata attributes](https://docs.enjin.io/docs/metadata-standard) for this collection.',
    'create_collection.args.explicitRoyaltyCurrencies' => 'Specifies tokens to be designated as royalty currencies for tokens in the collection. This feature is a placeholder for potential future on-chain implementation and is not currently active.',
    'create_collection.args.marketPolicy' => 'Configures default marketplace royalties for all tokens in the collection. If left empty, no default royalty is applied. Royalties can still be set individually for each token.',
    'create_collection.args.mintPolicy' => 'Configures minting restrictions for the collection or its tokens, such as setting limits on token issuance or enforcing specific supply models. Leave empty for no restrictions.',
    'create_collection.description' => 'Creates a new on-chain collection. The new collection ID will be returned in the transaction events after being finalized on-chain.',
    'create_token.args.recipient' => 'The recipient account of the tokens for the initial mint.',
    'create_token.description' => 'Creates a new token in a collection. The new token will be automatically transferred to the specified recipient account.',
    'create_wallet.args.externalId' => 'An identifier for the managed wallet, used as the derivation path for the created wallet and to associate it with the specified external ID.',
    'create_wallet.description' => 'Creates a managed wallet derived from the daemon wallet using the provided external ID. Managed wallets simplify user onboarding by eliminating the need for users to own or set up blockchain wallets directly. [Learn more](https://docs.enjin.io/docs/using-managed-wallets).',
    'destroy_collection.description' => 'Deletes a collection and get its reserved value back. You can only destroy a collection after its circulating supply is fully burned and it has no attributes. [Learn more](https://docs.enjin.io/docs/burning-destroying-tokens).',
    'freeze.args.collectionAccount' => 'Specifies the account whose tokens within the collection will be frozen, applicable when targeting a collection account for the freeze operation.',
    'freeze.args.collectionId' => 'Identifies the collection involved in the freeze operation, whether freezing the entire collection, specific tokens within it, or tokens held by specific accounts.',
    'freeze.args.freezeState' => 'Defines whether the freeze is permanent, temporary, or ensures the target will never be frozen.',
    'freeze.args.freezeType' => 'Specifies the target to freeze: the entire collection, a collection account, an individual token, or a token account.',
    'freeze.args.tokenAccount' => 'Specifies the account holding the token to be frozen, applicable when targeting a specific token account for the freeze operation.',
    'freeze.args.tokenId' => 'Specifies the ID of the token involved in the freeze operation, applicable when freezing a specific token or a token held by a specific account.',
    'freeze.description' => 'Freezes a collection, token, collection account or token account. Tokens cannot be transferred or burned if they are frozen. Freezing a collection or collection account will freeze all the tokens in it. [Learn more](https://docs.enjin.io/docs/freezing-thawing).',
    'infuse.description' => 'Infuses ENJ into a token, locking the specified amount of ENJ within it. The locked ENJ can only be released by the token holder through burning the token, which destroys it and transfers the ENJ to the token holder. [Learn more](https://docs.enjin.io/docs/enj-infusion).',
    'infuse.args.tokenId' => 'The ID of the token to infuse with ENJ.',
    'infuse.args.amount' => 'The amount of ENJ to infuse into each token unit, denoted in u128 (divided by 10^18). [Learn more](https://docs.enjin.io/docs/enj-infusion).',
    'link_wallet.description' => 'Note: This workflow and mutation are placeholder, please use the VerifyAccount flow to associate a wallet account to this platform.',
    'mark_and_list_pending_transactions.args.accounts' => 'The accounts to filter the transactions.',
    'mark_and_list_pending_transactions.args.mark_as_processing' => 'Sets whether the transactions should be moved into the processing state (default to true).',
    'mark_and_list_pending_transactions.args.network' => 'Optionally set the network to use.',
    'mark_and_list_pending_transactions.description' => 'Get a list of new pending transactions and mark them as processing.',
    'mint_token.args.collectionId' => 'The collection ID to mint from.',
    'mint_token.args.recipient' => 'The recipient account of the tokens being minted.',
    'mint_token.description' => 'Mint more supply for an existing token. If the token has a supply cap, the total supply cannot exceed the cap.',
    'mutate_collection.args.collectionId' => 'The ID of the collection to be mutated.',
    'mutate_collection.args.mutation' => 'Defines the changes to be applied to the collection, such as transferring ownership or updating default royalties.',
    'mutate_collection.args.tokenId' => 'The ID of the token to be mutated.',
    'mutate_collection.description' => 'Updates the initial configuration of a collection, including the collection owner and the default royalties for the marketplace.',
    'mutate_token.args.mutation' => 'Defines the changes to be applied to the token, including the token\'s default royalties for the marketplace, forbidding marketplace listings, updating the token\'s infusion permissions, and the token name.',
    'mutate_token.description' => 'Updates the initial configuration of a token, including the token\'s default royalties for the marketplace, forbidding marketplace listings, updating the token\'s infusion permissions, and the token name.',
    'operator_transfer_token.args.params' => 'Configures the details of the token transfer, including the token to be sent, the source operator account, and the transfer amount.',
    'operator_transfer_token.args.params.keepAlive' => '(DEPRECATED) If true, the transaction will fail if the balance drops below the minimum requirement. Defaults to False.',
    'simple_transfer_token.args.params.keepAlive' => '(DEPRECATED) If true, the transaction will fail if the balance drops below the minimum requirement. Defaults to False.',
    'operator_transfer_token.description' => "Executes a single multiToken transfer using an operator account, allowing you to send tokens from another user's wallet with their [prior approval](https://docs.enjin.io/docs/multitoken-pallet#transfer-approvals).",
    'remove_all_attributes.args.attributeCount' => 'Specifies the expected number of attributes to be removed as a security measure. If the provided count does not match the on-chain attribute count, the transaction will fail. When left empty, the platform will automatically use the attribute count from the local database.',
    'remove_all_attributes.args.collectionId' => 'The collection ID.',
    'remove_all_attributes.description' => 'Remove all attributes from a collection or a specific token in a single transaction. If the tokenId argument is provided, all attributes are removed from the token; otherwise, they are removed from the collection.',
    'remove_collection.description' => 'Remove an attribute from the specified collection.',
    'remove_from_tracked.description' => 'Stop a collection from being tracked.',
    'remove_token_attribute.description' => 'Remove an attribute from the specified token.',
    'removed_from_tracked.description' => 'Remove on-chain data from being tracked.  Use this to remove collections and tokens from being track on the platform.  Already synced data will remain on the platform until synced again, but will not receive further updates from on-chain events.',
    'retry_transaction.description' => "Retries transactions that have failed or otherwise not been included on-chain after some time.  Use with caution and ensure the transactions really aren't yet on-chain (or likely to be) to make sure they are not accidentally included twice.",
    'send_transaction.args.signature' => 'The signature supplied from the user.',
    'send_transaction.args.signing_payload_json' => 'The signing payload to send in json format.',
    'set_collection_attribute.description' => 'Add or update an attribute on a collection.',
    'set_token_attribute.description' => 'Add or update an attribute on a token. Learn more about [metadata attributes](https://docs.enjin.io/docs/metadata-standard).',
    'set_wallet_account.description' => 'Set the account on a wallet model.',
    'simple_transfer_token.args.collectionId' => 'The collection ID to transfer from.',
    'simple_transfer_token.args.params' => 'The token id, and the amount to transfer.',
    'simple_transfer_token.args.params.amount' => 'Specifies the balance of the token to transfer.',
    'simple_transfer_token.description' => 'Transfers a specified MultiToken to a recipient account.',
    'thaw.args.collectionAccount' => 'Specifies the account whose tokens within the collection will be thawed, applicable when targeting a collection account for the thaw operation.',
    'thaw.args.collectionId' => 'Identifies the collection involved in the thaw operation, whether thawing the entire collection, specific tokens within it, or tokens held by specific accounts.',
    'thaw.args.freezeType' => 'Specifies the target to thaw: the entire collection, a collection account, an individual token, or a token account.',
    'thaw.args.tokenAccount' => 'Specifies the account holding the token to be thawed, applicable when targeting a specific token account for the thaw operation.',
    'thaw.args.tokenId' => 'Specifies the ID of the token involved in the thaw operation, applicable when thawing a specific token or a token held by a specific account.',
    'thaw.description' => 'Thaw a previously frozen collection or token. [Learn more](https://docs.enjin.io/docs/freezing-thawing).',
    'transfer_all_balance.description' => 'Transfers the entire balance of the native currency from the sender\'s account on the configured blockchain (e.g., ENJ on the Enjin Matrixchain or CENJ on the Canary Matrixchain testnet). Includes an optional argument to keep the recipient account alive by ensuring it retains sufficient balance for the existential deposit, preventing the account from being reaped. [Learn more about the existential deposit](https://support.enjin.io/hc/en-gb/articles/16297132519569-What-is-the-Existential-Deposit).',
    'transfer_balance.description' => '(DEPRECATED) Transfers a balance from one account to another.',
    'transfer_keep_alive.description' => 'Transfers the native currency of the configured blockchain (e.g., ENJ on the Enjin Matrixchain or CENJ on the Canary Matrixchain testnet) while ensuring the transfer does not cause the recipient account to be reaped due to insufficient balance for the existential deposit. [Learn more about the existential deposit](https://support.enjin.io/hc/en-gb/articles/16297132519569-What-is-the-Existential-Deposit).',
    'transfer_allow_death.description' => 'Transfers the native currency of the configured blockchain (e.g., ENJ on the Enjin Matrixchain or CENJ on the Canary Matrixchain testnet) without enforcing the existential deposit requirement, allowing the sender\'s account to be reaped if the balance falls below the threshold. [Learn more about the existential deposit](https://support.enjin.io/hc/en-gb/articles/16297132519569-What-is-the-Existential-Deposit).',
    'unapprove_collection.args.collectionId' => 'The collection that approval will be removed from.',
    'unapprove_collection.args.operator' => 'The account that collection approval will be removed from.',
    'unapprove_collection.description' => 'Removes the approval of any specific account to make transfers from a collection account.',
    'unapprove_token.args.collectionId' => 'The collection that the token belongs to.',
    'unapprove_token.args.operator' => 'The account that token approval will be removed from.',
    'unapprove_token.args.tokenId' => 'The token that approval will be removed from.',
    'unapprove_token.description' => 'Removes the approval of any specific account to make transfers from a token account.',
    'update_external_id.description' => 'Change the external ID on a wallet model.',
    'update_transaction.args.signedAtBlock' => 'The block number the transaction was signed at.',
    'update_transaction.args.state' => 'The new state of the transaction.',
    'update_transaction.args.transactionHash' => 'The on chain transaction hash.',
    'update_transaction.args.transactionId' => 'The on chain transaction id.',
    'update_transaction.description' => 'Update a transaction with a new state, transaction ID and transaction hash. Please note that the transaction ID and transaction hash are immutable once set.',
    'update_transaction.error.hash_and_id_are_immutable' => 'The transaction id and hash are immutable once set.',
    'update_wallet_external_id.cannot_update_id_on_managed_wallet' => 'Cannot update the external id on a managed wallet.',
    'verify_account.description' => 'The wallet calls this mutation to prove the ownership of the user account.',
    'operator_transfer_token.args.keepAlive' => '(DEPRECATED) If true, the transaction will fail if the balance drops below the minimum requirement. Defaults to False.',
    'refresh_metadata.description' => "Refresh the collection's or token's metadata.",
];
